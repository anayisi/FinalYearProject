LANDING PAGE
I want a landing page for an online examination management system, I want it in three divisions. The top division should be a navigation pane, there should be a log in button at the right side of this pane, at the left side, there should be a logo that can be replaced with my school’s logo. And at the center of this pane, I want the name of the school written in bold.
The middle pane/division should hold a bold sign up button. And the lower pane/division should hold an about section, describing the function of the online examination management system.

LOGIN PAGE
The login page has the logo of the university on the right side of the webpage header , with the name of the university aligned in the middle with a sub-header of the system name and a signup button at the left corner of the header.
A form labeled "Login" with requirement as follows , email/username ,Id number, password, with a log in button at the bottom and a forgot password link below.
And a footer with names of three developers and below the names is the year and copyright text.

I want this login page updated, such that when a user clicks on the login button after keying in their credentials, a check will be run in the database with name "project". The database has three tables; Students, Lecturers, Administrators. When the login button is clicked, the system should scan through the database for the table holding the entered email address. When found, the id number should be confirmed for the particular user, and the password (hashed) should also be confirmed againt the hashed password of the user stored in the database. Based on the identity of the user (Student, Lecturer or Administrator), one of the following should be loaded, StudentProfile.html, LecturerProfile.html, AdministratorProfile.html, having passed the credentials of the user logging in to it.

SIGNUP PAGE
I want a signup page for an examination management system. I want it in three divisons. The header consists of UENR logo on the left side, the middle pane should have the name of the school and title of the project and the right side should have the login button.
A form labeled "signup" with requirement as follows: name, date of birth, email, and "category" with requirements student, lecturer and administrator. 
When student is selected it should have requirement as follows: level, school, program, id and password.
When lecturer is selected it should have requirement as follows: school, id and password.
When an administratoris selected it should have requirement as follows: an id and password.
And footer with copyright symbol, year , name of the school and copyright text.

I want a signup page for an examination management system. It should have three divisions; header, body and footer. The header should have a logo on the left, the name of the university in the center, and a login button on the right. The middle/ body section should hold a floating signup form taking the following credentials; Name, Date of Birth, Email, Three radio buttoned options from which one can be selected; Student, Lecturer, Administrator. Based on the selected option, the following credentials should appear for onward filling by the user;
If Student is selected; Level (with drop down options – Level 100, Level 200, Level 300, Level 400), School (with drop down options – Sciences, Engineering, Agriculture and technology,  Geosciences, Graduate Studies, Natural Resources, Mines and Built Environment, Arts and Social Sciences, Energy), based on the school selected the following programs should be available in drop down for selection, "SCIENCES": ["Diploma Statistics (Regular/Weekend)", "Diploma Information Technology", "Diploma Computer Science", "BSc. Biological Science", "BSc. Medical Laboratory Sciences", "BSc. Nursing", "BSc. Chemistry", "BSc. Computer Science (Regular/Weekend)",  "BSc. Information Technology (Regular/Weekend)", "BSc. Actuarial Science (Regular/Weekend)", "BSc. Statistics (Regular/Weekend)", "BSc. Mathematics (Regular/Weekend)", "BSc. Biochemistry"], "ENGINEERING": ["BSc. Agricultural Engineering", "BSc. Computer Engineering", "BSc. Electrical and Electronic Engineering [Regular/Weekend]", "BSc. Environmental Engineering", "BSc. Mechanical Engineering [Regular/Weekend]", "BSc. Civil Engineering [Regular/Weekend"], "AGRICULTURE AND TECHNOLOGY": ["BSc. Agriculture", "BSc. Agribusiness", "BSc. Food Technology", "BSc. Agricultural Resource and Economics"], "GEOSCIENCES": ["Diploma Geo-Information Science", "Diploma Geomatics","BSc. Geomatics", "BSc. Planning and Sustainability", "BSc. Applied Meteorology and Climate Science", "BSc. Geoinformation Science", "BSc. Geo-Environmental Science", "BSc. Climate Change and Sustainability"], "GRADUATE STUDIES": ["MSc./PhD Sustainable Energy Management", "MSc./PhD Environmental Engineering Management", "MPhil/PhD Social Forestry and Environmental Governance", "MSc./MPhil/PhD Environment", "Water and Sustainability", "MBA/MPhil/PhD Crop Science", "MSc./MPhil/PhD Computer Science", "MPhil. Applied Mathematics", "MSc./MPhil Environmental Planning and Development", "MBA/MPhil Agribusiness Management", "MSc./MPhil Climate Change", "MSc./MPhil Geoinformation Science", "MSc./MPhil Land Degradation Neutrality", "PhD Sustainable Land Management", "MSc./MPhil. Animal Production", "MPhil. Chemistry", "MPhil. Environment Science", "MSc. Sustainable Mining"], "NATURAL RESOURCES": ["Diploma Natural Resources Management", "Diploma Fire, Safety and Disaster Management", "BSc. Natural Resources","BSc. Hospitality Management", "BSc. Aquaculture and Aquatic Resource Management", "BSc. Fire, Safety and Disaster Management"], "MINES AND BUILT ENVIRONMENT": ["BSc. Sustainable Mining", "BSc. Sustainable Land Management"], "ARTS AND SOCIAL SCIENCES": ["BSc. Entrepreneurial Management", "BSc. Accounting", "BSc. Economics", "BA Professional French"], "ENERGY": ["BSc. Petroleum Engineering", "BSc. Renewable Energy Engineering"], then an id number and password should be taken.
If Lecturer is selected; School (with drop down options – Sciences, Engineering, Agriculture and technology,  Geosciences, Graduate Studies, Natural Resources, Mines and Built Environment, Arts and Social Sciences, Energy), then an id number and password should be taken.
If Administrator is selected; id number and password should be taken.
The form should have a signup button that submits when all spaces are filled.
The footer of this page should hold the names of the developers.

****HOLDS****
Compare the two signups and align the second with a signup.php
Create a three new tables RandStu, RandLec, RandAdmin, in 'project' database that generates random id numbers for students, lecturers and administrators respectively...

Update the new signup.php to run the id of the signing up user against the following tables in the database; randstu, randlec, randadmin. It is to ensure that the entered id corresponds to the identity (student, lecturer, admin) specified by the signing up user, doing so by ensuring that if a user is signing up as a Student, Lecturer or Administrator, the provided id is present specifically in the randstu, randlec or randadmin table respectively, otherwise an alert of incorrect id should be sent..

// Mock database - In a real application, this would be replaced with actual database queries
        const projectDatabase = {
            Students: [
                { id: 'ST001', email: 'student1@uenr.edu.gh', password: '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', name: 'John Student', department: 'Computer Science' },
                { id: 'ST002', email: 'student2@uenr.edu.gh', password: '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', name: 'Jane Student', department: 'Electrical Engineering' }
            ],
            Lecturers: [
                { id: 'LT001', email: 'lecturer1@uenr.edu.gh', password: '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', name: 'Dr. Smith', department: 'Mathematics', courses: ['MATH101', 'MATH202'] },
                { id: 'LT002', email: 'lecturer2@uenr.edu.gh', password: '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', name: 'Prof. Johnson', department: 'Physics', courses: ['PHYS101', 'PHYS301'] }
            ],
            Administrators: [
                { id: 'AD001', email: 'admin@uenr.edu.gh', password: '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8', name: 'Admin User', role: 'System Administrator' }
            ]
        };

        // Simple SHA-256 hashing function (for demo purposes)
        async function sha256(message) {
            // Encode as UTF-8
            const msgBuffer = new TextEncoder().encode(message);
            
            // Hash the message
            const hashBuffer = await crypto.subtle.digest('SHA-256', msgBuffer);
            
            // Convert to hex string
            const hashArray = Array.from(new Uint8Array(hashBuffer));
            const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
            
            return hashHex;
        }
         try {
                // Hash the password (in a real app, this would be done client-side before sending to server)
                const hashedPassword = await sha256(password);
                
                // Simulate network delay
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                // Check each table in the database for matching credentials
                let user = null;
                let userType = null;
                
                // Check Students table
                const student = projectDatabase.Students.find(u => 
                    (u.email === email || u.id === idNumber) && u.password === hashedPassword
                );
                
                if (student) {
                    user = student;
                    userType = 'Student';
                } else {
                    // Check Lecturers table
                    const lecturer = projectDatabase.Lecturers.find(u => 
                        (u.email === email || u.id === idNumber) && u.password === hashedPassword
                    );
                    
                    if (lecturer) {
                        user = lecturer;
                        userType = 'Lecturer';
                    } else {
                        // Check Administrators table
                        const admin = projectDatabase.Administrators.find(u => 
                            (u.email === email || u.id === idNumber) && u.password === hashedPassword
                        );
                        
                        if (admin) {
                            user = admin;
                            userType = 'Administrator';
                        }
                    }
                }
                
                if (user && userType) {
                    // Successful login - redirect to appropriate profile page
                    // In a real app, you would store the user session and redirect
                    console.log(`Login successful as ${userType}:`, user);
                    
                    // Store user data in sessionStorage (temporary for this demo)
                    sessionStorage.setItem('currentUser', JSON.stringify({
                        type: userType,
                        data: user
                    }));
                    
                    // Redirect to appropriate profile page
                    switch(userType) {
                        case 'Student':
                            window.location.href = 'StudentProfile.html';
                            break;
                        case 'Lecturer':
                            window.location.href = 'LecturerProfile.html';
                            break;
                        case 'Administrator':
                            window.location.href = 'AdministratorProfile.html';
                            break;
                    }
                } else {
                    // Invalid credentials
                    errorMessage.textContent = 'Invalid email, ID number or password. Please try again.';
                    errorMessage.classList.remove('hidden');
                }
            }